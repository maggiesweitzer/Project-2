---
title: "Project 2"
author: "Maggie Sweitzer"
format: html
editor: visual
---

Note: This code represents initial static coding to build components for shiny app. Some further edits were made after incorporating into shiny, and code below may be incomplete and/or contain slightly different variable names.

## Data Download Tab

```{r}
library(jsonlite)
library(httr)
library(tidyverse)
library(purrr)
```

### Initial Code to Query API for Monsters or Spells Data

Code below creates a function (get_dnd_api) to pull all pages of data for monsters or spells, depending on user input for argument "category" (default = "monsters"). First it initializes a list to store multiple urls. Then it creates a "base" url that contains everything except page numbers. Next, an ifelse statement determines the number of pages needing to be pulled depending on whether monsters or spells were selected. A for loop then pastes together the base_url with numbers 1:n, thereby creating a url and adding it to the list for each page. We then create another function called "get_url" that takes a url input and then goes through the steps of pulling data from the API and reformatting this to a tibble. Finally, we use the map_df function to apply this function across all of the urls contained in the url list, and to store these all in the dnd_binded_tbl.

```{r}

get_dnd_api <- function(category = "monsters"){
  urls <- list()
  base_url <- paste0(
    "https://api.open5e.com/v1/", category, "/?format=json&page=")

  ifelse(category %in% c("monsters"), 
         n <- 57, 
         n <- 29)
  
  for (i in 1:n){
    urls[[i]] <- paste0(base_url, i)
}
  get_url <- function(url){
    dnd_return <- httr::GET(url) 
    dnd_parsed <- fromJSON(rawToChar(dnd_return$content))
    dnd_tbl <- as_tibble(dnd_parsed$results)
    dnd_binded_tbl <- bind_rows(dnd_tbl)
}
  dnd_binded_tbl <- map_df(urls, get_url)
}

dnd_data_tbl <- get_dnd_api("spells")
```


### Code to clean and compute variables for monsters data

This code will: 1) change alignments to all lowercase to reduce number of categories; 2) convert size, and alignment to factors; 3) select the subset of relevant columns; 4) group by alignment and then filter out alignment factors with fewer than 30 monsters; 5) create new variables representing what we call the "moral" and "legal" aspects of alignment; 6) ungroup by alignment and then separate hit_dice variable into numerical components to calculate max and min damage

```{r}

dnd_binded_tbl$alignment <- tolower(dnd_binded_tbl$alignment)
dnd_binded_tbl$type <- tolower(dnd_binded_tbl$type)
dnd_monsters_tbl <- dnd_binded_tbl |>
  mutate(sizeF = as.factor(size),
         alignmentF = as.factor(alignment)) |>
  select(name, sizeF, type, subtype, alignmentF, hit_points, hit_dice, strength, dexterity, constitution, intelligence, wisdom, charisma) |>
  group_by(alignmentF) |>
  filter(n() > 30) |>
  mutate(legal = ifelse(
    alignmentF %in% c("lawful good", "lawful neutral", "lawful evil"), "lawful",
    ifelse(alignmentF %in% c("neutral good", "neutral", "neutral evil"), "neutral",
           ifelse(alignmentF %in% c("chaotic good", "chaotic neutral", "chaotic evil"), "chaotic", "unaligned")))) |>
  mutate(moral = ifelse(
    alignmentF %in% c("chaotic good", "lawful good", "neutral good"), "good",
                ifelse(alignmentF %in% c("chaotic neutral", "lawful neutral", "neutral"), "neutral",
                       ifelse(alignmentF %in% c("chaotic evil", "lawful evil", "neutral evil"), "evil", "unaligned")))) |>
  ungroup(alignmentF) |>
  separate_wider_delim(hit_dice, "+", names=c("hd_count_die", "hd_plus"), 
                       too_few = "align_start", cols_remove = FALSE) |>
  separate_wider_delim(hd_count_die, "d", names=c("hd_count", "hd_die")) |>
  mutate(hd_count = as.numeric(hd_count),
         hd_die = as.numeric(hd_die), 
         hd_plus = as.numeric(hd_plus)) |>
  mutate(max_dmg = ifelse(
    is.na(hd_die), hd_count,
    ifelse(
      is.na(hd_plus), hd_count*hd_die, (hd_count*hd_die)+hd_plus))) |>
  mutate(min_dmg = ifelse(
    is.na(hd_plus), hd_count, hd_count+hd_plus))

```
### Code to clean and compute variables for spells data

This code will change schools to all lowercase to reduce redundancy, convert school and components variables to factors, create separate columns for each character class with TRUE/FALSE indicator of whether or not they can perform theat spell, and select relevant columns.

```{r}

dnd_data_tbl$school <- tolower(dnd_data_tbl$school)
dnd_spells_tbl <- dnd_data_tbl |>
  mutate(componentsM = gsub('M', 'Material', components),
         componentsMS = gsub('S', 'Somatic', componentsM),
         componentsMSV = gsub('V', 'Verbal', componentsMS),
         components_recode = gsub(', ', '&', componentsMSV),
         Bard = ifelse(grepl("Bard", dnd_class), TRUE, FALSE),
         Cleric = ifelse(grepl("Cleric", dnd_class), TRUE, FALSE),
         Druid = ifelse(grepl("Druid", dnd_class), TRUE, FALSE),
         Paladin = ifelse(grepl("Paladin", dnd_class), TRUE, FALSE),
         Ranger = ifelse(grepl("Ranger", dnd_class), TRUE, FALSE),
         Sorcerer = ifelse(grepl("Sorcerer", dnd_class), TRUE, FALSE),
         Warlock = ifelse(grepl("Warlock", dnd_class), TRUE, FALSE),
         Wizard = ifelse(grepl("Wizard", dnd_class), TRUE, FALSE)) |>
  select(name, schoolF, components_recode, spell_level, Bard, Cleric,
         Druid, Paladin, Ranger, Sorcerer, Warlock, Wizard) 
```

## Data Exploration - Spells

### Contingency Table for Spells Data

The code below provides a contingency table of count data on number of spells of each type that each class of character can perform. User input could be included to choose the minimum spell level (default = 0).
```{r}

dnd_spells_tbl |>
  filter(spell_level > 8) |>
  group_by(school) |>
  summarize(across(where(is.logical), 
                   list("sum" = ~ sum(.x, na.rm = TRUE)), 
                   .names = "{.col}")) 

```

### Creating venn diagram of components needed

The code below creates a venn diagram for the components needed to cast each spell. Allow user input to choose spell level. 

```{r}
library(eulerr)
library(ggforce)

components <- dnd_spells_tbl |>
  filter(spell_level > 5, 
         spell_level < 8) |>
  group_by(components_recode) |>
  summarize(count = n())

components_vec <- deframe(components)

ggeulerr <- function(combinations = components_vec, show_quantities = TRUE, show_labels = FALSE, ...) {
  data <-
    eulerr::euler(combinations = combinations) %>%
    plot(quantities = show_quantities) %>%
    pluck("data")
  
  tibble() %>%
    ggplot() +
    ggforce::geom_ellipse(
      data = data$ellipses %>% as_tibble(rownames = "Set"),
      mapping = aes(x0 = h, y0 = k, a = a, b = b, angle = 0, 
                    fill = Set),
      alpha = 0.5
    ) +
    geom_text(
      data = {
        data$centers %>%
          mutate(
            label = labels %>%
              map2(quantities, ~ {
              if (!is.na(.x) && !is.na(.y) && show_labels) {
                paste0(.x, "\n", sprintf(.y, fmt = "%.2g"))
              } else if (!is.na(.x) && show_labels) {
                .x
              } else if (!is.na(.y)) {
                .y
              } else {
                ""
              }
            })
          )
      },
      mapping = aes(x = x, y = y, label = label)
    ) +
    theme(panel.grid = element_blank()) +
    coord_fixed() +
    scale_fill_hue() +
    guides(fill = guide_legend(title = "Components Needed") 
    )
}

ggeulerr()

```

### Create interactive bar graph displaying count of spells by school, allow user to specify class

This was created directly in shiny.


### Creating frequency tables for categorical spells variables

```{r}
dnd_spells_tbl |>
  group_by(componentsF) |>
  summarize(count = n())

dnd_spells_tbl |>
  group_by(school) |>
  summarize(count = n())

dnd_spells_tbl |>
  group_by(level_int, componentsF) |>
  summarize(count = n()) |>
  pivot_wider(names_from = level_int, values_from = count)

dnd_spells_tbl |>
  group_by(spell_level, school) |>
  summarize(count = n()) |>
  pivot_wider(names_from = spell_level, values_from = count)
```

## Data Exploration - Monsters

### Creating frequency tables for categorical monsters variables

```{r}

dnd_monsters_tbl |>
  group_by(alignment) |>
  summarize(count = n())

dnd_monsters_tbl |>
  group_by(type) |>
  summarize(count = n())

dnd_monsters_tbl |>
  group_by(size) |>
  summarize(count = n())

dnd_data_tbl |>
  group_by(moral, type) |>
  summarize(count = n()) |>
  pivot_wider(names_from = type, values_from = count)
```

### Summarizing numerical monsters variables

```{r}
dnd_monsters_tbl |>
  group_by(legal) |>
  summarize(across(where(is.numeric), 
                   list("mean" = ~ mean(.x, na.rm = TRUE), 
                        "median" = ~ median(.x, na.rm = TRUE)),
                   .names = "{.fn}_{.col}"))
dnd_monsters_tbl |>
  group_by(typeF) |>
  summarize(corr = cor(intelligence, strength))

```

### Graphs of Monsters Data

```{r}
ggplot(data = dnd_monsters_tbl, 
       mapping = aes(x = intelligence, y = dexterity)
) +
  geom_point(mapping = aes(color =sizeF)) +
  geom_smooth(method="lm")

```
### Box Plot of Hit Points of Monsters by Size

```{r}
ggplot(data = dnd_monsters_tbl, 
       mapping = aes(x = sizeF, y = hit_points)
) +
  geom_boxplot()
```
### Box Plot of Hit Points of Monsters by Size

```{r}
ggplot(data = dnd_monsters_tbl, 
       mapping = aes(x = typeF, y = charisma)
) +
  geom_boxplot()
```
### Bar Graph of Monster Count by Type
```{r}
g <- ggplot(data = dnd_monsters_tbl, aes(x=type))
g + geom_bar() +
  aes(fill = moral) +
  theme(axis.text.x = element_text(angle = 45)) +
    labs(
    title = "Count of Monsters by Type and Alignment",
    x = "Monster Type", y = "Number of Monsters",
    fill = "Moral Alignment")
  
  
  help(labs)
  
```
